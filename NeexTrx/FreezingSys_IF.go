//
// This file war generated by FastTars2go 1.0
// Generated from FreezingSys.tars
// Tencent.

package NeexTrx

import (
	"fmt"
	"github.com/TarsCloud/TarsGo/tars"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"unsafe"
)

type FreezingSys struct {
	s m.Servant
}

func (_obj *FreezingSys) User_into_dc2(Addr string, Symbol string, Hash string, Amount string, Type int32, _opt ...map[string]string) (ret bool, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Addr, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Symbol, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Hash, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Amount, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Type, 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(0, "user_into_dc2", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(_obj.int8ToByte(_resp.SBuffer))
	err = _is.Read_bool(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_ = length
	_ = have
	_ = ty
	return ret, nil
}
func (_obj *FreezingSys) Commit_withdraw_dc(Hash string, Symbol string, Amount string, MinerCost string, Rsp *string, _opt ...map[string]string) (ret bool, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Hash, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Symbol, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Amount, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(MinerCost, 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(0, "commit_withdraw_dc", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(_obj.int8ToByte(_resp.SBuffer))
	err = _is.Read_bool(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_string(&(*Rsp), 5, true)
	if err != nil {
		return ret, err
	}

	_ = length
	_ = have
	_ = ty
	return ret, nil
}
func (_obj *FreezingSys) Insert_innerexchange_fee(Hash string, MinerCost string, Rsp *string, _opt ...map[string]string) (ret bool, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Hash, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(MinerCost, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(0, "insert_innerexchange_fee", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(_obj.int8ToByte(_resp.SBuffer))
	err = _is.Read_bool(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_string(&(*Rsp), 3, true)
	if err != nil {
		return ret, err
	}

	_ = length
	_ = have
	_ = ty
	return ret, nil
}

func (_obj *FreezingSys) SetServant(s m.Servant) {
	_obj.s = s
}

func (_obj *FreezingSys) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}

func (_obj *FreezingSys) byteToInt8(s []byte) []int8 {
	d := *(*[]int8)(unsafe.Pointer(&s))
	return d
}
func (_obj *FreezingSys) int8ToByte(s []int8) []byte {
	d := *(*[]byte)(unsafe.Pointer(&s))
	return d
}

func (_obj *FreezingSys) AddServant(imp _impFreezingSys, obj string) {
	tars.AddServant(_obj, imp, obj)
}

type _impFreezingSys interface {
	User_into_dc2(Addr string, Symbol string, Hash string, Amount string, Type int32) (ret bool, err error)
	Commit_withdraw_dc(Hash string, Symbol string, Amount string, MinerCost string, Rsp *string) (ret bool, err error)
	Insert_innerexchange_fee(Hash string, MinerCost string, Rsp *string) (ret bool, err error)
}

func (_obj *FreezingSys) Dispatch(_val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket) (err error) {
	var length int32
	var have bool
	var ty byte
	_is := codec.NewReader(_obj.int8ToByte(req.SBuffer))
	_os := codec.NewBuffer()
	_imp := _val.(_impFreezingSys)
	switch req.SFuncName {
	case "user_into_dc2":
		var Addr string
		err = _is.Read_string(&Addr, 1, true)
		if err != nil {
			return err
		}
		var Symbol string
		err = _is.Read_string(&Symbol, 2, true)
		if err != nil {
			return err
		}
		var Hash string
		err = _is.Read_string(&Hash, 3, true)
		if err != nil {
			return err
		}
		var Amount string
		err = _is.Read_string(&Amount, 4, true)
		if err != nil {
			return err
		}
		var Type int32
		err = _is.Read_int32(&Type, 5, true)
		if err != nil {
			return err
		}
		ret, err := _imp.User_into_dc2(Addr, Symbol, Hash, Amount, Type)
		if err != nil {
			return err
		}

		err = _os.Write_bool(ret, 0)
		if err != nil {
			return err
		}
	case "commit_withdraw_dc":
		var Hash string
		err = _is.Read_string(&Hash, 1, true)
		if err != nil {
			return err
		}
		var Symbol string
		err = _is.Read_string(&Symbol, 2, true)
		if err != nil {
			return err
		}
		var Amount string
		err = _is.Read_string(&Amount, 3, true)
		if err != nil {
			return err
		}
		var MinerCost string
		err = _is.Read_string(&MinerCost, 4, true)
		if err != nil {
			return err
		}
		var Rsp string
		ret, err := _imp.Commit_withdraw_dc(Hash, Symbol, Amount, MinerCost, &Rsp)
		if err != nil {
			return err
		}

		err = _os.Write_bool(ret, 0)
		if err != nil {
			return err
		}

		err = _os.Write_string(Rsp, 5)
		if err != nil {
			return err
		}
	case "insert_innerexchange_fee":
		var Hash string
		err = _is.Read_string(&Hash, 1, true)
		if err != nil {
			return err
		}
		var MinerCost string
		err = _is.Read_string(&MinerCost, 2, true)
		if err != nil {
			return err
		}
		var Rsp string
		ret, err := _imp.Insert_innerexchange_fee(Hash, MinerCost, &Rsp)
		if err != nil {
			return err
		}

		err = _os.Write_bool(ret, 0)
		if err != nil {
			return err
		}

		err = _os.Write_string(Rsp, 3)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var status map[string]string
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      _obj.byteToInt8(_os.ToBytes()),
		Status:       status,
		SResultDesc:  "",
		Context:      req.Context,
	}
	_ = length
	_ = have
	_ = ty
	return nil
}
